knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
n <- 70
lower <- c(-2.5,-1.5)
upper <- c(1.5,2.5)
x <- cbind(runif(n,lower[1],upper[1]),runif(n,lower[2],upper[2]))
f <- function(x){
20 + x[,1]^2 + x[,2]^2 - 10*(cos(2*pi*x[,1]) + cos(2*pi*x[,2]))
}
y <- f(x)
## Alternative mit einer anderen Testfunktion:
#set.seed(1)
#n <- 50
#lower <- c(-5,0)
#upper <- c(10,15)
#x <- cbind(runif(n,lower[1],upper[1]),runif(n,lower[2],upper[2]))
#f <- function(x){
#  (x[,2] - 5.1/(4 * pi^2) * (x[,1]^2) + 5/pi * x[,1] - 6)^2 +
#            10 * (1 - 1/(8 * pi)) * cos(x[,1]) + 10
#}
#y <- f(x)
df <- data.frame(x=x,y=y)
require(ggplot2)
require(viridis)
ggplot(data=df,aes(x=x.1,y=x.2,colour=y)) +
geom_point() +
scale_colour_viridis(option="A")
require(SPOT)
model <- buildKriging(x,matrix(y,,1))
nplot_dim <- 100
xplot <- expand.grid(seq(from=lower[1],to=upper[1],length.out=nplot_dim),
seq(from=lower[2],to=upper[2],length.out=nplot_dim))
yplot <- predict(model,xplot)
df <- data.frame(x.1=xplot$Var1,x.2=xplot$Var2,y=yplot)
ggplot(data=df,aes(x=x.1,y=x.2,z=y)) +
geom_contour_filled(bins=50,show.legend=FALSE) +
scale_fill_viridis(option="A",discrete = T)
yplot2 <- f(xplot)
df <- data.frame(x.1=xplot$Var1,x.2=xplot$Var2,y=yplot2)
ggplot(data=df,aes(x=x.1,y=x.2,z=y)) +
geom_contour_filled(bins=50,show.legend=FALSE) +
scale_fill_viridis(option="A",discrete = T)
model$like
model <- buildKriging(x,matrix(y,,1),control=list(
budgetAlgTheta=1
))
model$like
yplot <- predict(model,xplot)
df <- data.frame(x.1=xplot$Var1,x.2=xplot$Var2,y=yplot)
ggplot(data=df,aes(x=x.1,y=x.2,z=y)) +
geom_contour_filled(bins=50,show.legend=FALSE) +
scale_fill_viridis(option="A",discrete = T)
uniformRandomSearch <- function (x = NULL, fun, lower, upper,
control = list(), ...) {
con <- list(funEvals = 200) # default limit on function evaluations
con[names(control)] <- control
control <- con
npar <- length(lower) # number of parameters
xtest <- matrix(runif(control$funEvals*npar,
lower,upper),,npar,byrow=TRUE)
ytest <- matrix(fun(xtest, ...), 1)
## important note: ... are arguments passed
## from the calling function directly to fun
## (not touched by uniformRandomSearch)
best_index <- which.min(ytest)
print(xtest[best_index,])
list(
xbest = xtest[best_index,],
ybest = ytest[best_index],
count = nrow(xtest)
)
### Alternative example, using a different algorithm instead of random search
#result <- nloptr::stogo(x0=runif(length(lower),lower,upper),
#                        fn=fun,lower = lower, upper=upper,...)
#list(
#  xbest = result$par,
#  ybest = result$value,
#  count = 0
#)
}
model <- buildKriging(x,matrix(y,,1),control=list(
algTheta=uniformRandomSearch
))
model$like
model$Theta
model$Lambda
yplot <- predict(model,xplot)
df <- data.frame(x.1=xplot$Var1,x.2=xplot$Var2,y=yplot)
ggplot(data=df,aes(x=x.1,y=x.2,z=y)) +
geom_contour_filled(bins=50,show.legend=FALSE) +
scale_fill_viridis(option="A",discrete = T)
justPlotNothingElse <- function (x = NULL, fun, lower, upper,
control = list(), ...) {
test_var1 <- seq(from=lower[1],to=upper[1],length.out=100)
xtest <- cbind(test_var1, #first variable is varied from min to max value
(upper[2]-lower[2])/2, #other two variables are set to mean value
(upper[3]-lower[3])/2)
ytest <- fun(xtest, ...) #evaluate all
plot(xtest[,1],ytest,type="l")
list(
xbest = lower,
ybest = 0
) #return something, not meaningful in this case
}
doNotUseThisModel <- buildKriging(x,matrix(y,,1),control=list(
algTheta=justPlotNothingElse
))
cma_es <- function (x = NULL, fun, lower, upper,
control = list(), ...) {
con <- list(funEvals = 200) # default limit on function evaluations
con[names(control)] <- control
control <- con
npar <- length(lower) # number of parameters
xtest <- matrix(runif(control$funEvals*npar,
lower,upper),,npar,byrow=TRUE)
ytest <- matrix(fun(xtest, ...), 1)
# important note: ... are arguments passed
# from the calling function directly to fun
# (not touched by uniformRandomSearch)
best_index <- which.min(ytest)
print(xtest[best_index,])
list(
xbest = xtest[best_index,],
ybest = ytest[best_index],
count = nrow(xtest)
)
### Alternative example, using a different algorithm instead of random search
result <- cmaes::cma_es(par = runif(length(lower),lower,upper),
fn=fun,lower = lower, upper=upper, ...)
list(
xbest = result$par,
ybest = result$value,
count = 0
)
}
model <- buildKriging(x,matrix(y,,1),control=list(
algTheta=cma_es
))
model$like
model$Theta
model$Lambda
yplot <- predict(model,xplot)
df <- data.frame(x.1=xplot$Var1,x.2=xplot$Var2,y=yplot)
ggplot(data=df,aes(x=x.1,y=x.2,z=y)) +
geom_contour_filled(bins=50,show.legend=FALSE) +
scale_fill_viridis(option="A",discrete = T)
